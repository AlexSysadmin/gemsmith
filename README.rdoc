= Overview

Gemsmith allows you to easily craft new gems via the command line with custom settings (if desired). If you are a fan
of Bundler[https://github.com/carlhuda/bundler] and appreciate the quick and easy setup you get via the +bundle gem+
command then you'll enjoy this gem since it is essentially an enhanced version of Bundler.

= Features

* Builds a gem skeleton with Bundler functionality in mind.
* Allows for common settings that you can configure once and use for every new gem that you build.
* Supports binary skeletons with Thor[https://github.com/wycats/thor] command line functionality.
* Supports {Ruby on Rails}[http://rubyonrails.org] skeletons.
* Supports RSpec[http://rspec.info] test skeletons.
* Adds commonly needed README, CHANGELOG, LICENSE, etc. template files.

= Requirements

* Bundler[https://github.com/carlhuda/bundler]
* Basic familiarity with gem building.

= Setup

Type the following from the command line to install:

  gem install gemsmith

You can also configure common custom settings that you would like to apply to all new gems that you build. To do this,
simply create the following file:

  ~/.gemsmith/settings.yml

...with the following settings (for example):

  --- 
  :gem_platform: Gem::Platform::RUBY
  :author_name: Brooke Kuhlmann
  :author_email: brooke@redalchemist.com
  :author_url: http://www.redalchemist.com
  :company_name: Red Alchmist
  :company_url: http://www.redalchemist.com 

NOTE: All options above are optional. You don't have to create the setting.yml at all or you can pick and
choose what options to define. Up to you. If no options are configured, then the default options are as follows:

  gem_platform: Gem::Platform::RUBY
  author_name: <git user name>
  author_email: <git email>
  author_url: nil
  company_name: <author name>
  company_url: <author URL>

= Usage

From the command line, type: gemsmith help

  gemsmith -c, [create=GEM_NAME]  # Create new gem.
  gemsmith -e, [edit]             # Edit gem settings in default editor (assumes $EDITOR environment variable).
  gemsmith -h, [help]             # Show this message.
  gemsmith -v, [version]          # Show version.

For more gem creation options, type: gemsmith help create

  -r, [--rspec]  # Add RSpec support.
                 # Default: true
  -b, [--bin]    # Adds binary support.
  -R, [--rails]  # Adds Rails support.

Also, don't forget that once you have created your gem skeleton, the following rake tasks are also
available to you via Bundler (i.e. rake -T):

  rake build    # Build <gem>-<version>.gem into the pkg directory
  rake install  # Build and install <gem>-<version>.gem into system gems
  rake release  # Create tag v0.1.1 and build and push <gem>-<version>.gem to Rubygems

= Best Practices

1. Ensure your RUBYOPT env variable includes the -w option. {Read the reasons why here}[http://avdi.org/devblog/2011/06/23/how-ruby-helps-you-fix-your-broken-code/].

= Author

{Red Alchemist}[http://www.redalchemist.com]

= License

Copyright (c) 2011 {Red Alchemist}[http://www.redalchemist.com].
Read the LICENSE for details.

= History

Read the CHANGELOG for details.
